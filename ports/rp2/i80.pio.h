// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --- //
// i80 //
// --- //

#define i80_wrap_target 0
#define i80_wrap 1

static const uint16_t i80_program_instructions[] = {
            //     .wrap_target
    0x6010, //  0: out    pins, 16        side 0     
    0xb042, //  1: nop                    side 1     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program i80_program = {
    .instructions = i80_program_instructions,
    .length = 2,
    .origin = -1,
};

static inline pio_sm_config i80_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + i80_wrap_target, offset + i80_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

static inline void i80_program_init(PIO pio, uint sm, uint offset, uint db_base, uint db_count, uint clk_pin, float clk_div) {
    // printf("%s, clk_div : %f\n", __func__, clk_div);
    for (int i = 0; i < db_count; i++) {
        pio_gpio_init(pio, (db_base + i));
    }
    pio_gpio_init(pio, clk_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, db_base, db_count, true);
    pio_sm_set_consecutive_pindirs(pio, sm, clk_pin, 1, true);
    pio_sm_config c = i80_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, clk_pin);
    sm_config_set_out_pins(&c, db_base, db_count);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    sm_config_set_clkdiv(&c, clk_div);
    sm_config_set_out_shift(&c, false, true, db_count);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
// static inline void i80_put(PIO pio, uint sm, uint16_t x) {
//     while (pio_sm_is_tx_fifo_full(pio, sm))
//         ;
//     *(volatile uint16_t*)&pio->txf[sm] = x;
// }
static inline void i80_wait_idle(PIO pio, uint sm) {
    uint32_t sm_stall_mask = 1u << (sm + PIO_FDEBUG_TXSTALL_LSB);
    pio->fdebug = sm_stall_mask;
    while (!(pio->fdebug & sm_stall_mask))
        ;
}

#endif

